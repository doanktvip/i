//<dependency>
//            <groupId>com.mysql</groupId>
//            <artifactId>mysql-connector-j</artifactId>
//            <version>8.4.0</version>
//        </dependency>
//		
//public class JdbcConnector {
//    private static JdbcConnector instance;
//    private final Connection conn;
//    
//    static {
//        try {
//            Class.forName("com.mysql.cj.jdbc.Driver");
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(JdbcConnector.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
//    
//    private JdbcConnector() throws SQLException {
//        this.conn = DriverManager.getConnection("jdbc:mysql://localhost/quizdb", "root", "root");
//    }
//    
//    public static JdbcConnector getInstance() throws SQLException {
//        if (instance == null)
//            instance = new JdbcConnector();
//        return instance;
//    }
//    
//    public Connection connect() {
//        return this.conn;
//    }
//    
//    public void close() throws SQLException {
//        if (this.conn != null)
//            this.conn.close();
//    }
//}
//
//
//public class MyAlert {
//    private static MyAlert instance;
//    private final Alert alert;
//    
//    private MyAlert() {
//        this.alert = new Alert(Alert.AlertType.INFORMATION);
//        this.alert.setTitle("Quiz App");
//        this.alert.setHeaderText("Quiz App");
//    }
//    
//    public static MyAlert getInstance() {
//        if (instance == null)
//            instance = new MyAlert();
//        return instance;
//    }
//    
//    public void showMsg(String message) {
//        this.alert.setContentText(message);
//        this.alert.showAndWait();
//    }
//    public Optional<ButtonType> showMsg(String message,Alert.AlertType type) {
//        this.alert.setContentText(message);
//        this.alert.setAlertType(type);
//        return this.alert.showAndWait();
//    }
//}
//
//public class MyStage {
//    private static MyStage instance;
//    private final Stage stage;
//    private static Scene scene;
//            
//    private MyStage(){
//        stage = new Stage();
//        stage.setTitle("Quiz App");
//    }
//    public static MyStage getInstance(){
//        if(instance==null){
//            instance=new MyStage();
//        }
//        return instance;
//    }
//    public void ShowScene(String fxml) throws IOException{
//        if(!this.stage.isShowing()){
//            if(scene==null)
//                scene = new Scene(new FXMLLoader(App.class.getResource(fxml)).load());
//            else
//                scene.setRoot(new FXMLLoader(App.class.getResource(fxml)).load());
//            ThemeManager.applyTheme(scene);
//            this.stage.setScene(scene);
//            this.stage.show();
//        }
//    }
//}
//
//public void addQuestion(Questions q) throws SQLException {
//        Connection conn = JdbcConnector.getInstance().connect();
//        conn.setAutoCommit(false);
//        String sql = "INSERT INTO question(content, hint, image, category_id, level_id) VALUES(?, ?, ?, ?, ?)";
//        
//        PreparedStatement stm = conn.prepareCall(sql);
//        stm.setString(1, q.getContent());
//        stm.setString(2, q.getHint());
//        stm.setString(3, q.getImage());
//        stm.setInt(4, q.getCatgery().getId());
//        stm.setInt(5, q.getLevel().getId());
//        
//        if (stm.executeUpdate() > 0) {
//            int questionId = -1;
//            ResultSet r = stm.getGeneratedKeys();
//            if (r.next())
//                questionId = r.getInt(1);
//            
//            sql = "INSERT INTO choice(content, is_correct, question_id) VALUES(?, ?, ?)";
//            
//            for (var c: q.getChoices()) {
//                stm = conn.prepareCall(sql);
//                stm.setString(1, c.getContent());
//                stm.setBoolean(2, c.is_correct());
//                stm.setInt(3, questionId);
//                
//                stm.executeUpdate();
//            }
//            
//            conn.commit();
//        } else
//            conn.rollback();
//    }
//	
//	
//public boolean deleteQuestion(int QuestionId) throws SQLException {
//        Connection conn = JdbcConnector.getInstance().connect();
//        PreparedStatement stm = conn.prepareCall("DELETE FROM question WHERE id=?");
//        stm.setInt(1, QuestionId);
//        return stm.executeUpdate() > 0;
//    }
//	
//	
//	
//public abstract class BaseServices<T> {
//    public abstract PreparedStatement getPreparedStatement(Connection conn) throws SQLException;
//    public abstract List<T> getResultSet(ResultSet rs) throws SQLException;
//    public List<T> List() throws SQLException {
//        Connection conn = JdbcConnector.getInstance().connect();
//        PreparedStatement stm = this.getPreparedStatement(conn);
//
//        return this.getResultSet(stm.executeQuery());
//    }
//}
//
//
//public class FlyweightFactory {
//    private static Map<String,List> cacheData=new HashMap<>();
//    public static <T> List<T> getData(BaseServices s,String key) throws SQLException{
//        if(cacheData.containsKey(key)){
//            return cacheData.get(key);
//        }else{
//            List results=s.List();
//            cacheData.put(key, results);
//            return results;
//        }
//    }
//}
//
 this.txtSearch.textProperty().addListener((e) -> {
            try {
                BaseQuestionServices s = new KeywordQuestionServicesDecorator(Configs.questionServices, this.txtSearch.getText());
                this.loadQuestion(s.list());
            } catch (SQLException ex) {
                Logger.getLogger(QuestionsController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        });
        
        this.cbSearchCates.getSelectionModel().selectedItemProperty().addListener(e -> {
            try {
                BaseQuestionServices s = new CategoryQuestionServicesDecorator(Configs.questionServices, this.cbSearchCates.getSelectionModel().getSelectedItem());
                this.loadQuestion(s.list());
            } catch (SQLException ex) {
                Logger.getLogger(QuestionsController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        });
        
        this.cbSearchLevels.getSelectionModel().selectedItemProperty().addListener(e -> {
            try {
                BaseQuestionServices s = new LevelQuestionServicesDecorator(Configs.questionServices, this.cbSearchLevels.getSelectionModel().getSelectedItem());
                this.loadQuestion(s.list());
            } catch (SQLException ex) {
                Logger.getLogger(QuestionsController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        });
    }  